name: 构建 CloudflareST-Rust
on:  
  workflow_dispatch:   # 允许手动触发
    inputs:
      build_windows_amd64:
        description: '构建 Windows AMD64'
        type: boolean
        default: false
      build_windows_arm64:
        description: '构建 Windows ARM64'
        type: boolean
        default: false
      build_linux_amd64:
        description: '构建 Linux AMD64'
        type: boolean
        default: false
      build_linux_arm64:
        description: '构建 Linux ARM64'
        type: boolean
        default: false
      build_macos_amd64:
        description: '构建 macOS AMD64'
        type: boolean
        default: false
      build_macos_arm64:
        description: '构建 macOS ARM64'
        type: boolean
        default: false
      upload_to_repo:
        description: '上传二进制文件到项目仓库'
        type: boolean
        default: false
      create_release:
        description: '创建发布版本'
        type: boolean
        default: true

jobs:
  validate_inputs:
    name: 验证输入选项
    runs-on: ubuntu-latest
    steps:
      - name: 检查上传和发布选项
        if: ${{ github.event.inputs.upload_to_repo != 'true' && github.event.inputs.create_release != 'true' }}
        run: |
          echo "错误：必须选择'上传二进制文件到项目仓库'或'创建发布版本'中的至少一个选项"
          exit 1
          
      - name: 检查构建选项
        if: ${{ github.event.inputs.build_windows_amd64 != 'true' && github.event.inputs.build_windows_arm64 != 'true' && github.event.inputs.build_linux_amd64 != 'true' && github.event.inputs.build_linux_arm64 != 'true' && github.event.inputs.build_macos_amd64 != 'true' && github.event.inputs.build_macos_arm64 != 'true' }}
        run: |
          echo "错误：必须至少选择一种构建选项"
          exit 1

  cleanup_releases:
    name: 清理旧版本发布
    needs: validate_inputs
    if: ${{ github.event.inputs.create_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }
            
  build:
    name: 构建项目
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc, x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: 设置 Zig
        uses: mlugg/setup-zig@v2.0.0
        with:
          version: '0.20.0'

      - name: 安装 cargo-zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: 构建项目
        env:
          BUILD_OUTPUT_DIR: binaries/${{ matrix.os }}
        run: |
          mkdir -p $BUILD_OUTPUT_DIR
          cargo zigbuild --release --target ${{ matrix.target }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/CloudflareST.exe $BUILD_OUTPUT_DIR/
          else
            cp target/${{ matrix.target }}/release/CloudflareST $BUILD_OUTPUT_DIR/
          fi

      - name: 上传二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binary
          path: $BUILD_OUTPUT_DIR/
          retention-days: 1
