name: 构建 CloudflareST-Rust
on:  
  workflow_dispatch:   # 允许手动触发
    inputs:
      build_windows_amd64:
        description: '构建 Windows AMD64'
        type: boolean
        default: false
      build_windows_arm64:
        description: '构建 Windows ARM64'
        type: boolean
        default: false
      build_linux_amd64:
        description: '构建 Linux AMD64'
        type: boolean
        default: false
      build_linux_arm64:
        description: '构建 Linux ARM64'
        type: boolean
        default: false
      build_macos_amd64:
        description: '构建 macOS AMD64'
        type: boolean
        default: false
      build_macos_arm64:
        description: '构建 macOS ARM64'
        type: boolean
        default: false
      upload_to_repo:
        description: '上传二进制文件到项目仓库'
        type: boolean
        default: false
      create_release:
        description: '创建发布版本'
        type: boolean
        default: true

jobs:
  validate_inputs:
    name: 验证输入选项
    runs-on: ubuntu-latest
    steps:
      - name: 检查上传和发布选项
        if: ${{ github.event.inputs.upload_to_repo != 'true' && github.event.inputs.create_release != 'true' }}
        run: |
          echo "错误：必须选择'上传二进制文件到项目仓库'或'创建发布版本'中的至少一个选项"
          exit 1
          
      - name: 检查构建选项
        if: ${{ github.event.inputs.build_windows_amd64 != 'true' && github.event.inputs.build_windows_arm64 != 'true' && github.event.inputs.build_linux_amd64 != 'true' && github.event.inputs.build_linux_arm64 != 'true' && github.event.inputs.build_macos_amd64 != 'true' && github.event.inputs.build_macos_arm64 != 'true' }}
        run: |
          echo "错误：必须至少选择一种构建选项"
          exit 1

  cleanup_releases:
    name: 清理旧版本发布
    needs: validate_inputs
    if: ${{ github.event.inputs.create_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

  build_windows:
    name: 构建 Windows
    needs: validate_inputs
    if: ${{ github.event.inputs.build_windows_amd64 == 'true' || github.event.inputs.build_windows_arm64 == 'true' }}
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: 设置 Zig
        uses: mlugg/setup-zig@v2.0.0
        with:
          version: 'latest'

      - name: 安装 cargo-zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: 构建 Windows AMD64
        if: ${{ github.event.inputs.build_windows_amd64 == 'true' }}
        run: |
          mkdir -p build/windows binaries/windows_amd64
          rustup target add x86_64-pc-windows-msvc
          cargo zigbuild --release --target x86_64-pc-windows-msvc
          cp target/x86_64-pc-windows-msvc/release/CloudflareST.exe binaries/windows_amd64/CloudflareST.exe
          mkdir -p temp_windows_amd64
          cp target/x86_64-pc-windows-msvc/release/CloudflareST.exe temp_windows_amd64/CloudflareST.exe
          mkdir -p releases
          tar -czf releases/CloudflareST-Rust_windows_amd64.tar.gz -C temp_windows_amd64 CloudflareST.exe

      - name: 构建 Windows ARM64
        if: ${{ github.event.inputs.build_windows_arm64 == 'true' }}
        run: |
          mkdir -p build/windows-arm64 binaries/windows_arm64
          rustup target add aarch64-pc-windows-msvc
          cargo zigbuild --release --target aarch64-pc-windows-msvc
          cp target/aarch64-pc-windows-msvc/release/CloudflareST.exe binaries/windows_arm64/CloudflareST.exe
          mkdir -p temp_windows_arm64
          cp target/aarch64-pc-windows-msvc/release/CloudflareST.exe temp_windows_arm64/CloudflareST.exe
          tar -czf releases/CloudflareST-Rust_windows_arm64.tar.gz -C temp_windows_arm64 CloudflareST.exe

  build_linux:
    name: 构建 Linux
    needs: validate_inputs
    if: ${{ github.event.inputs.build_linux_amd64 == 'true' || github.event.inputs.build_linux_arm64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: 设置 Zig
        uses: mlugg/setup-zig@v2.0.0
        with:
          version: 'latest'

      - name: 安装 cargo-zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: 构建 Linux AMD64
        if: ${{ github.event.inputs.build_linux_amd64 == 'true' }}
        run: |
          mkdir -p build/linux binaries/linux_amd64
          rustup target add x86_64-unknown-linux-gnu
          cargo zigbuild --release --target x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/CloudflareST binaries/linux_amd64/CloudflareST
          mkdir -p temp_linux_amd64
          cp target/x86_64-unknown-linux-gnu/release/CloudflareST temp_linux_amd64/CloudflareST
          mkdir -p releases
          tar -czf releases/CloudflareST-Rust_linux_amd64.tar.gz -C temp_linux_amd64 CloudflareST

      - name: 构建 Linux ARM64
        if: ${{ github.event.inputs.build_linux_arm64 == 'true' }}
        run: |
          mkdir -p build/linux-arm64 binaries/linux_arm64
          rustup target add aarch64-unknown-linux-gnu
          cargo zigbuild --release --target aarch64-unknown-linux-gnu
          cp target/aarch64-unknown-linux-gnu/release/CloudflareST binaries/linux_arm64/CloudflareST
          mkdir -p temp_linux_arm64
          cp target/aarch64-unknown-linux-gnu/release/CloudflareST temp_linux_arm64/CloudflareST
          tar -czf releases/CloudflareST-Rust_linux_arm64.tar.gz -C temp_linux_arm64 CloudflareST

      - name: 上传 Windows 发布包
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: releases/CloudflareST-Rust_windows.tar.gz
          retention-days: 1

      - name: 上传 Windows 二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: binaries/windows
          retention-days: 1

      - name: 创建 Windows 发布版本
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: actions/create-release@v1
        with:
          tag_name: windows-v1.0.0
          release_name: Windows Release
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_linux:
    name: 构建 Linux
    needs: validate_inputs
    if: ${{ github.event.inputs.build_linux_amd64 == 'true' || github.event.inputs.build_linux_arm64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ github.event.inputs.build_linux_amd64 == 'true' && 'x86_64-unknown-linux-gnu' || 'aarch64-unknown-linux-gnu' }}

      - name: 设置 Zig
        uses: mlugg/setup-zig@v2.0.0
        with:
          version: 'latest'

      - name: 安装 cargo-zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: 构建项目
        run: |
          mkdir -p binaries/${{ github.event.inputs.build_linux_amd64 == 'true' && 'Linux_AMD64' || 'Linux_ARM64' }}
          cargo zigbuild --release --target ${{ github.event.inputs.build_linux_amd64 == 'true' && 'x86_64-unknown-linux-gnu' || 'aarch64-unknown-linux-gnu' }}
          cp target/${{ github.event.inputs.build_linux_amd64 == 'true' && 'x86_64-unknown-linux-gnu' || 'aarch64-unknown-linux-gnu' }}/release/CloudflareST binaries/${{ github.event.inputs.build_linux_amd64 == 'true' && 'Linux_AMD64' || 'Linux_ARM64' }}

      - name: 上传 Linux 发布包
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: releases/CloudflareST-Rust_linux.tar.gz
          retention-days: 1

      - name: 上传 Linux 二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: binaries/linux
          retention-days: 1

      - name: 创建 Linux 发布版本
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: actions/create-release@v1
        with:
          tag_name: linux-v1.0.0
          release_name: Linux Release
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_macos:
    name: 构建 macOS
    needs: validate_inputs
    if: ${{ github.event.inputs.build_macos_amd64 == 'true' || github.event.inputs.build_macos_arm64 == 'true' }}
    runs-on: macos-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: 设置 Zig
        uses: mlugg/setup-zig@v2.0.0
        with:
          version: 'latest'

      - name: 安装 cargo-zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: 构建 macOS AMD64
        if: ${{ github.event.inputs.build_macos_amd64 == 'true' }}
        run: |
          mkdir -p build/macos binaries/macos_amd64
          rustup target add x86_64-apple-darwin
          cargo zigbuild --release --target x86_64-apple-darwin
          cp target/x86_64-apple-darwin/release/CloudflareST binaries/macos_amd64/CloudflareST
          mkdir -p temp_macos_amd64
          cp target/x86_64-apple-darwin/release/CloudflareST temp_macos_amd64/CloudflareST
          mkdir -p releases
          tar -czf releases/CloudflareST-Rust_macos_amd64.tar.gz -C temp_macos_amd64 CloudflareST

      - name: 构建 macOS ARM64
        if: ${{ github.event.inputs.build_macos_arm64 == 'true' }}
        run: |
          mkdir -p build/macos-arm64 binaries/macos_arm64
          rustup target add aarch64-apple-darwin
          cargo zigbuild --release --target aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/CloudflareST binaries/macos_arm64/CloudflareST
          mkdir -p temp_macos_arm64
          cp target/aarch64-apple-darwin/release/CloudflareST temp_macos_arm64/CloudflareST
          tar -czf releases/CloudflareST-Rust_macos_arm64.tar.gz -C temp_macos_arm64 CloudflareST

      - name: 上传 macOS 发布包
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: releases/CloudflareST-Rust_macos.tar.gz
          retention-days: 1

      - name: 上传 macOS 二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: binaries/macos
          retention-days: 1

      - name: 创建 macOS 发布版本
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: actions/create-release@v1
        with:
          tag_name: macos-v1.0.0
          release_name: macOS Release
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  commit_binaries:
    name: 提交所有二进制文件
    needs: [build_windows, build_linux, build_macos]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 提交二进制文件
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add binaries/
          current_time=$(date '+%Y/%m/%d %H:%M:%S')
          if ! git diff --staged --quiet; then
            git commit -m "更新所有平台二进制文件 ${current_time}"
            git push origin main
