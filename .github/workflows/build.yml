name: 构建和发布

on:
  workflow_dispatch:  # 手动触发工作流
    inputs:
      upload_to_repo:
        description: '上传二进制文件到项目仓库'
        type: boolean
        default: false
      create_release:
        description: '创建发布版本'
        type: boolean
        default: true

jobs:
  cleanup_releases:
    name: 清理旧版本发布
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

  build:
    name: 构建 ${{ matrix.os }}_${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: ${{ always() }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Windows
            runner: windows-latest
            arch: AMD64
            target: x86_64-pc-windows-msvc
            binary_name: CloudflareST-Rust.exe
          - os: Windows
            runner: windows-latest
            arch: ARM64
            target: aarch64-pc-windows-msvc
            binary_name: CloudflareST-Rust.exe
          - os: Linux
            runner: ubuntu-latest
            arch: AMD64
            target: x86_64-unknown-linux-musl
            binary_name: CloudflareST-Rust
            zig: true
          - os: Linux
            runner: ubuntu-latest
            arch: ARM64
            target: aarch64-unknown-linux-musl
            binary_name: CloudflareST-Rust
            zig: true
          - os: MacOS
            runner: macos-latest
            arch: AMD64
            target: x86_64-apple-darwin
            binary_name: CloudflareST-Rust
            zig: true
          - os: MacOS
            runner: macos-latest
            arch: ARM64
            target: aarch64-apple-darwin
            binary_name: CloudflareST-Rust
            zig: true

    steps:
      - name: 等待清理旧版本完成
        if: ${{ github.event.inputs.create_release == 'true' }}
        run: |
          echo "等待清理旧版本完成"
        shell: bash

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 清理target目录
        run: rm -rf target
        shell: bash

      - name: 安装最新 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 安装 Zig
        if: ${{ matrix.zig == true }}
        uses: korandoru/setup-zig@v1
        with:
          zig-version: master

      - name: 安装 cargo-zigbuild
        if: ${{ matrix.zig == true }}
        run: cargo install cargo-zigbuild
        shell: bash

      - name: 使用 cargo-zigbuild 构建
        if: ${{ matrix.zig == true }}
        run: cargo zigbuild --release --target ${{ matrix.target }}
        shell: bash

      - name: 使用 cargo 构建
        if: ${{ matrix.zig != true }}
        run: cargo build --release --target ${{ matrix.target }}
        shell: bash
          
      - name: 创建二进制目录
        run: mkdir -p binaries/${{ matrix.os }}_${{ matrix.arch }}
        shell: bash

      - name: 复制二进制文件
        run: |
          if [ "${{ matrix.os }}" = "Windows" ]; then
            cp target/${{ matrix.target }}/release/CloudflareST-Rust.exe binaries/${{ matrix.os }}_${{ matrix.arch }}/
          else
            cp target/${{ matrix.target }}/release/CloudflareST-Rust binaries/${{ matrix.os }}_${{ matrix.arch }}/
          fi
        shell: bash

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: CloudflareST-Rust-${{ matrix.os }}_${{ matrix.arch }}
          path: binaries/${{ matrix.os }}_${{ matrix.arch }}/

  upload_to_repo:
    name: 上传二进制文件到仓库
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.upload_to_repo == 'true' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts/

      - name: 准备二进制文件
        run: |
          # 清空或创建 binaries 目录
          rm -rf binaries
          mkdir -p binaries
          
          # 遍历所有构建产物目录，直接复制到对应平台目录
          for dir in downloaded_artifacts/CloudflareST-Rust-*/; do
            platform_name=$(basename "$dir" | sed 's/CloudflareST-Rust-//')
            mkdir -p "binaries/$platform_name"
            cp -r "$dir"/* "binaries/$platform_name/"
          done
          
          # 显示目录结构以便调试
          echo "最终目录结构:"
          find binaries -type f | sort
        shell: bash

      - name: 上传二进制文件到仓库
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "自动构建: 添加所有平台二进制文件"
          file_pattern: 'binaries/*'

  create_release:
    name: 创建发布版本
    needs: [build, cleanup_releases]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 准备发布文件
        run: |
          mkdir -p release
          # 遍历所有构建产物目录，按平台打包文件
          for dir in artifacts/CloudflareST-Rust-*/; do
            platform_name=$(basename "$dir" | sed 's/CloudflareST-Rust-//')
            os_name=$(echo "$platform_name" | cut -d'_' -f1 | tr '[:upper:]' '[:lower:]')
            arch_name=$(echo "$platform_name" | cut -d'_' -f2 | tr '[:upper:]' '[:lower:]')
            
            # 创建临时目录用于打包
            mkdir -p "temp_$platform_name"
            
            if [[ "$os_name" == "windows" ]]; then
              # Windows平台使用zip格式
              cp "$dir"/* "temp_$platform_name/"
              cd "temp_$platform_name"
              zip -r "../release/CloudflareST-Rust_${os_name}_${arch_name}.zip" .
              cd ..
            else
              # Linux和MacOS平台使用tar.gz格式
              cp "$dir"/* "temp_$platform_name/"
              cd "temp_$platform_name"
              tar -czf "../release/CloudflareST-Rust_${os_name}_${arch_name}.tar.gz" .
              cd ..
            fi
            
            # 清理临时目录
            rm -rf "temp_$platform_name"
          done
        shell: bash

      - name: 创建发布版本
        uses: softprops/action-gh-release@v1
        with:
          name: "CloudflareST-Rust 最新版本"
          tag_name: "latest"
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
