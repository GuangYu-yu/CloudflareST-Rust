name: 构建和发布

on:
  workflow_dispatch:
    inputs:
      upload_to_repo:
        description: '上传二进制文件到项目仓库'
        type: boolean
        default: false
      create_release:
        description: '创建发布版本'
        type: boolean
        default: true
      project_name:
        description: '项目名称'
        type: string
        default: 'CloudflareST-Rust'
        required: true

jobs:
  build:
    name: 构建 ${{ matrix.os }}_${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: ${{ always() }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Windows
            runner: windows-latest
            arch: AMD64
            target: x86_64-pc-windows-msvc
            binary_name: ${{ github.event.inputs.project_name }}.exe
          - os: Windows
            runner: windows-latest
            arch: ARM64
            target: aarch64-pc-windows-msvc
            binary_name: ${{ github.event.inputs.project_name }}.exe
          - os: Linux
            runner: ubuntu-latest
            arch: AMD64
            target: x86_64-unknown-linux-musl
            binary_name: ${{ github.event.inputs.project_name }}
          - os: Linux
            runner: ubuntu-latest
            arch: ARM64
            target: aarch64-unknown-linux-musl
            binary_name: ${{ github.event.inputs.project_name }}
          - os: MacOS
            runner: macos-latest
            arch: AMD64
            target: x86_64-apple-darwin
            binary_name: ${{ github.event.inputs.project_name }}
          - os: MacOS
            runner: macos-latest
            arch: ARM64
            target: aarch64-apple-darwin
            binary_name: ${{ github.event.inputs.project_name }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装最新 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 安装 Zig
        uses: mlugg/setup-zig@v2.0.5
        with:
          version: master

      - name: 尝试 cargo-zigbuild 构建
        run: |
          cargo install --locked cargo-zigbuild
          cargo update
          echo "尝试使用 cargo-zigbuild 构建..."
          if ! cargo zigbuild --release --target ${{ matrix.target }}; then
            echo "cargo-zigbuild 构建失败，使用 cargo build 进行回退..."
            cargo build --release --target ${{ matrix.target }} || exit 1
          fi
        shell: bash

      - name: 创建二进制目录
        run: mkdir -p binaries/${{ matrix.os }}_${{ matrix.arch }}
        shell: bash

      - name: 复制二进制文件
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} binaries/${{ matrix.os }}_${{ matrix.arch }}/
        shell: bash

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.project_name }}-${{ matrix.os }}_${{ matrix.arch }}
          path: binaries/${{ matrix.os }}_${{ matrix.arch }}/

  strip_binaries:
    name: Strip 二进制文件
    needs: [build]
    runs-on: windows-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: stripped_artifacts/

      - name: 使用 llvm-strip
        run: |
          Get-ChildItem -Recurse -File stripped_artifacts -Include *.exe, ${{ github.event.inputs.project_name }} | ForEach-Object {
            Write-Host "Stripping $($_.FullName)"
            & "llvm-strip" $_.FullName
          }
        shell: pwsh

      - name: 上传精简后的产物
        uses: actions/upload-artifact@v4
        with:
          name: stripped_artifacts
          path: stripped_artifacts/

  upload_to_repo:
    name: 上传二进制文件到仓库
    needs: [strip_binaries]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.upload_to_repo == 'true' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          name: stripped_artifacts
          path: downloaded_artifacts/

      - name: 准备二进制文件
        run: |
          rm -rf binaries
          mkdir -p binaries
          for dir in downloaded_artifacts/${{ github.event.inputs.project_name }}-*/; do
            platform_name=$(basename "$dir" | sed 's/${{ github.event.inputs.project_name }}-//')
            mkdir -p "binaries/$platform_name"
            cp -r "$dir"/* "binaries/$platform_name/"
          done
          echo "最终目录结构:"
          find binaries -type f | sort

      - name: 上传二进制文件到仓库
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "自动构建: 添加所有平台二进制文件"
          file_pattern: 'binaries/*'

  create_release:
    name: 创建发布版本
    needs: [strip_binaries]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({ owner, repo });
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({ owner, repo, release_id: release.id });
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({ owner, repo, ref: `tags/${release.tag_name}` });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          name: stripped_artifacts
          path: artifacts/

      - name: 准备发布文件
        run: |
          mkdir -p release
          for dir in artifacts/${{ github.event.inputs.project_name }}-*/; do
            platform_name=$(basename "$dir" | sed 's/${{ github.event.inputs.project_name }}-//')
            os_name=$(echo "$platform_name" | cut -d'_' -f1 | tr '[:upper:]' '[:lower:]')
            arch_name=$(echo "$platform_name" | cut -d'_' -f2 | tr '[:upper:]' '[:lower:]')
            mkdir -p "temp_$platform_name"
            cp "$dir"/* "temp_$platform_name/"
            cd "temp_$platform_name"
            if [[ "$os_name" == "windows" ]]; then
              zip -r "../release/${{ github.event.inputs.project_name }}_${os_name}_${arch_name}.zip" .
            else
              tar -czf "../release/${{ github.event.inputs.project_name }}_${os_name}_${arch_name}.tar.gz" .
            fi
            cd ..
            rm -rf "temp_$platform_name"
          done

      - name: 创建发布版本
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ github.event.inputs.project_name }} 最新版本"
          tag_name: "latest"
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
