name: 构建 CloudflareST-Rust
on:  
  workflow_dispatch:   # 允许手动触发
    inputs:
      build_windows_x86_64:
        description: '构建 Windows x86_64'
        type: boolean
        default: true
      build_windows_arm64:
        description: '构建 Windows ARM64'
        type: boolean
        default: false
      build_linux_amd64:
        description: '构建 Linux AMD64'
        type: boolean
        default: true
      build_linux_arm64:
        description: '构建 Linux ARM64'
        type: boolean
        default: true
      build_macos_x86_64:
        description: '构建 macOS x86_64'
        type: boolean
        default: true
      build_macos_arm64:
        description: '构建 macOS ARM64'
        type: boolean
        default: true

jobs:
  cleanup_releases:
    name: 清理旧版本发布
    runs-on: ubuntu-latest
    steps:
      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

  build_windows:
    name: 构建 Windows
    needs: cleanup_releases
    if: ${{ github.event.inputs.build_windows_x86_64 == 'true' }}
    runs-on: ubuntu-latest  
    steps:  
      - name: 检出代码  
        uses: actions/checkout@v4  

      - name: 设置 Rust 环境
        uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
        with:
          toolchain: '1.82.0'

      - name: 安装 cross
        run: |
          cargo install cross

      - name: 构建 Windows
        run: |
          mkdir -p build/windows binaries/windows_x86_64
          cross build --release --target x86_64-pc-windows-gnu
          cp target/x86_64-pc-windows-gnu/release/CloudflareST-Rust.exe binaries/windows_x86_64/CloudflareST-Rust.exe
          mkdir -p temp_windows
          cp target/x86_64-pc-windows-gnu/release/CloudflareST-Rust.exe temp_windows/CloudflareST-Rust.exe
          mkdir -p releases
          tar -czf releases/CloudflareST-Rust_windows_x86_64.tar.gz -C temp_windows CloudflareST-Rust.exe

      - name: 上传 Windows 发布包
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: releases/CloudflareST-Rust_windows_x86_64.tar.gz
          retention-days: 1

      - name: 上传 Windows 二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: binaries/windows_x86_64
          retention-days: 1
          
  build_windows_arm64:
      name: 构建 Windows ARM64
      needs: cleanup_releases
      if: ${{ github.event.inputs.build_windows_arm64 == 'true' }}
      runs-on: windows-latest  # 改用 Windows 运行器
      steps:  
        - name: 检出代码  
          uses: actions/checkout@v4  
  
        - name: 设置 Rust 环境
          uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
          with:
            toolchain: '1.82.0'
  
        - name: 安装 ARM64 目标
          run: |
            rustup target add aarch64-pc-windows-msvc
  
        - name: 构建 Windows ARM64
          run: |
            mkdir -p build/windows-arm64 binaries/windows_arm64
            cargo build --release --target aarch64-pc-windows-msvc
            cp target/aarch64-pc-windows-msvc/release/CloudflareST-Rust.exe binaries/windows_arm64/CloudflareST-Rust.exe
            mkdir -p temp_windows_arm64
            cp target/aarch64-pc-windows-msvc/release/CloudflareST-Rust.exe temp_windows_arm64/CloudflareST-Rust.exe
            mkdir -p releases
            tar -czf releases/CloudflareST-Rust_windows_arm64.tar.gz -C temp_windows_arm64 CloudflareST-Rust.exe
          shell: bash
  
        - name: 下载 Windows ARM64 发布包
          uses: actions/download-artifact@v4
          with:
            name: windows-arm64-release
            path: releases/CloudflareST-Rust_windows_arm64.tar.gz
            retention-days: 1
  
        - name: 上传 Windows ARM64 二进制文件
          uses: actions/upload-artifact@v4
          with:
            name: windows-arm64-binary
            path: binaries/windows_arm64
            retention-days: 1

  build_linux:
    name: 构建 Linux
    needs: cleanup_releases
    if: ${{ github.event.inputs.build_linux_amd64 == 'true' || github.event.inputs.build_linux_arm64 == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust 环境
        uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
        with:
          toolchain: '1.82.0'

      build_linux_amd64:
          name: 构建 Linux AMD64
          needs: cleanup_releases
          if: ${{ github.event.inputs.build_linux_amd64 == 'true' }}
          runs-on: ubuntu-latest
          steps:
            - name: 检出代码
              uses: actions/checkout@v4
      
            - name: 设置 Rust 环境
              uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
              with:
                toolchain: '1.82.0'
      
            - name: 构建 Linux AMD64
              run: |
                mkdir -p build/linux-amd64 binaries/linux_amd64
                docker run --rm -v $(pwd):/app -w /app \
                  rust:1.82.0-slim \
                  sh -c "apt-get update && \
                        apt-get install -y musl-tools && \
                        rustup target add x86_64-unknown-linux-musl && \
                        cargo build --release --target x86_64-unknown-linux-musl"
                  cp target/x86_64-unknown-linux-musl/release/CloudflareST-Rust binaries/linux_amd64/CloudflareST-Rust
                  mkdir -p temp_linux_amd64
                  cp target/x86_64-unknown-linux-musl/release/CloudflareST-Rust temp_linux_amd64/CloudflareST-Rust
                  mkdir -p releases
                  tar -czf releases/CloudflareST-Rust_linux_amd64.tar.gz -C temp_linux_amd64 CloudflareST-Rust
      
            - name: 下载 Linux AMD64 发布包
              if: ${{ github.event.inputs.build_linux_amd64 == 'true' && contains(needs.*.result, 'success') }}
              uses: actions/download-artifact@v4
              with:
                name: linux-amd64-release
                path: releases
      
            - name: 下载 Linux ARM64 发布包
              if: ${{ github.event.inputs.build_linux_arm64 == 'true' && contains(needs.*.result, 'success') }}
              uses: actions/download-artifact@v4
              with:
                name: linux-arm64-release
                path: releases
      
            - name: 上传 Linux AMD64 二进制文件
              uses: actions/upload-artifact@v4
              with:
                name: linux-amd64-binary
                path: binaries/linux_amd64
                retention-days: 1
      
            - name: 上传 Linux AMD64 二进制文件
              uses: actions/upload-artifact@v4
              with:
                name: linux-amd64-binary
                path: binaries/linux_amd64
                retention-days: 1
      
      build_linux_arm64:
          name: 构建 Linux ARM64
          needs: cleanup_releases
          if: ${{ github.event.inputs.build_linux_arm64 == 'true' }}
          runs-on: ubuntu-latest
          steps:
            - name: 检出代码
              uses: actions/checkout@v4
      
            - name: 设置 Rust 环境
              uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
              with:
                toolchain: '1.82.0'
      
            - name: 构建 Linux ARM64
              run: |
                mkdir -p build/linux-arm64 binaries/linux_arm64
                docker run --rm -v $(pwd):/app -w /app \
                  rust:1.82.0-slim \
                  sh -c "apt-get update && \
                        apt-get install -y musl-tools gcc-aarch64-linux-gnu libc6-dev-arm64-cross && \
                        ln -s /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-musl-gcc && \
                        rustup target add aarch64-unknown-linux-musl && \
                        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc && \
                        cargo build --release --target aarch64-unknown-linux-musl"
                  cp target/aarch64-unknown-linux-musl/release/CloudflareST-Rust binaries/linux_arm64/CloudflareST-Rust
                  mkdir -p temp_linux_arm64
                  cp target/aarch64-unknown-linux-musl/release/CloudflareST-Rust temp_linux_arm64/CloudflareST-Rust
                  mkdir -p releases
                  tar -czf releases/CloudflareST-Rust_linux_arm64.tar.gz -C temp_linux_arm64 CloudflareST-Rust
      
            - name: 上传 Linux ARM64 发布包
              uses: actions/upload-artifact@v4
              with:
                name: linux-arm64-release
                path: releases/CloudflareST-Rust_linux_arm64.tar.gz
                retention-days: 1
      
            - name: 上传 Linux ARM64 二进制文件
              uses: actions/upload-artifact@v4
              with:
                name: linux-arm64-binary
                path: binaries/linux_arm64
                retention-days: 1

  build_macos:
    name: 构建 macOS
    needs: cleanup_releases
    if: ${{ github.event.inputs.build_macos_x86_64 == 'true' || github.event.inputs.build_macos_arm64 == 'true' }}
    runs-on: macos-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust 环境
        uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
        with:
          toolchain: '1.82.0'

      - name: 构建 macOS AMD64
        if: ${{ github.event.inputs.build_macos_x86_64 == 'true' }}
        run: |
          mkdir -p build/macos binaries/macos_x86_64
          rustup target add x86_64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
          cp target/x86_64-apple-darwin/release/CloudflareST-Rust binaries/macos_x86_64/CloudflareST-Rust
          mkdir -p temp_macos_x86_64
          cp target/x86_64-apple-darwin/release/CloudflareST-Rust temp_macos_x86_64/CloudflareST-Rust
          mkdir -p releases
          tar -czf releases/CloudflareST-Rust_macos_x86_64.tar.gz -C temp_macos_x86_64 CloudflareST-Rust

      - name: 构建 macOS ARM64
        if: ${{ github.event.inputs.build_macos_arm64 == 'true' }}
        run: |
          mkdir -p build/macos-arm64 binaries/macos_arm64
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/CloudflareST-Rust binaries/macos_arm64/CloudflareST-Rust
          mkdir -p temp_macos_arm64
          cp target/aarch64-apple-darwin/release/CloudflareST-Rust temp_macos_arm64/CloudflareST-Rust
          tar -czf releases/CloudflareST-Rust_macos_arm64.tar.gz -C temp_macos_arm64 CloudflareST-Rust

      - name: 上传 macOS 发布包
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: releases/CloudflareST-Rust_macos_*.tar.gz
          retention-days: 1

      - name: 上传 macOS 二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: |
            binaries/macos_x86_64
            binaries/macos_arm64
          retention-days: 1

  commit_binaries:
    name: 提交所有二进制文件
    needs: [build_windows, build_windows_arm64, build_linux_amd64, build_linux_arm64, build_macos]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 创建二进制文件目录
        run: mkdir -p binaries

      # 下载所有构建产物
      - name: 下载 Windows 二进制文件
        if: ${{ github.event.inputs.build_windows_x86_64 == 'true' && needs.build_windows.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: windows-binary
          path: binaries

      - name: 下载 Windows ARM64 二进制文件
        if: ${{ github.event.inputs.build_windows_arm64 == 'true' && needs.build_windows_arm64.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: windows-arm64-binary
          path: binaries

      - name: 下载 Linux AMD64 二进制文件
        if: ${{ github.event.inputs.build_linux_amd64 == 'true' && needs.build_linux_amd64.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: linux-amd64-binary
          path: binaries

      - name: 下载 Linux ARM64 二进制文件
        if: ${{ github.event.inputs.build_linux_arm64 == 'true' && needs.build_linux_arm64.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: linux-arm64-binary
          path: binaries

      - name: 下载 Linux 二进制文件
        uses: actions/download-artifact@v4
        with:
          name: linux-binary
          path: binaries

      - name: 下载 macOS 二进制文件
        uses: actions/download-artifact@v4
        with:
          name: macos-binary
          path: binaries

      # 一次性提交所有二进制文件
      - name: 提交所有二进制文件
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add binaries/
          current_time=$(date '+%Y/%m/%d %H:%M:%S')
          if ! git diff --staged --quiet; then
            git commit -m "更新所有平台二进制文件 ${current_time}"
            git push origin main
          fi

  create_release:
    name: 创建发布版本
    needs: commit_binaries
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 创建发布目录
        run: mkdir -p releases

      - name: 下载 Windows 发布包
        if: ${{ github.event.inputs.build_windows_x86_64 == 'true' && contains(needs.*.result, 'success') }}
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: releases

      - name: 下载 Linux 发布包
        uses: actions/download-artifact@v4
        with:
          name: linux-release
          path: releases

      - name: 下载 macOS 发布包
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: releases

      - name: 创建发布版本
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.0-${{ github.run_number }}
          name: CloudflareST-Rust v1.0.0-${{ github.run_number }}
          body: |
            CloudflareST-Rust 自动构建版本
            
            包含以下平台的二进制文件：
            ${{ github.event.inputs.build_windows_x86_64 == 'true' && '- Windows x86_64' || '' }}
            ${{ github.event.inputs.build_windows_arm64 == 'true' && '- Windows ARM64' || '' }}
            ${{ github.event.inputs.build_linux_amd64 == 'true' && '- Linux AMD64' || '' }}
            ${{ github.event.inputs.build_linux_arm64 == 'true' && '- Linux ARM64' || '' }}
            ${{ github.event.inputs.build_macos_x86_64 == 'true' && '- macOS x86_64' || '' }}
            ${{ github.event.inputs.build_macos_arm64 == 'true' && '- macOS ARM64' || '' }}
          files: releases/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

