name: 构建 Cloudflare-Rust
on:  
  workflow_dispatch:   # 允许手动触发

jobs:
  cleanup_releases:
    name: 清理旧版本发布
    runs-on: ubuntu-latest
    steps:
      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

  build_linux_windows:  
    name: 构建 Linux 和 Windows
    needs: cleanup_releases
    runs-on: ubuntu-latest  

    steps:  
      - name: 检出代码  
        uses: actions/checkout@v4  

      - name: 设置 Rust 环境
        uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
        with:
          toolchain: '1.82.0'

      - name: 安装 cross
        run: |
          cargo install cross

      - name: 构建 Windows
        run: |
          mkdir -p build/windows
          cross build --release --target x86_64-pc-windows-gnu
          cp target/x86_64-pc-windows-gnu/release/CloudflareST-Rust.exe build/windows/Cloudflare-Rust_windows_x86_64.exe

      - name: 提交并推送 Windows 可执行文件
        if: success()
        run: |
          mkdir -p binaries
          cp build/windows/Cloudflare-Rust_windows_x86_64.exe binaries/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull origin main --no-rebase || git pull origin main --no-rebase
          git add binaries/
          current_time=$(date '+%Y/%m/%d %H:%M:%S')
          if ! git diff --staged --quiet; then
            git commit -m "更新 Windows 二进制文件 ${current_time}"
            git push origin main
          fi

      - name: 构建 Linux AMD64
        run: |
          mkdir -p build/linux-amd64
          cross build --release --target x86_64-unknown-linux-musl
          cp target/x86_64-unknown-linux-musl/release/CloudflareST-Rust build/linux-amd64/Cloudflare-Rust_linux_amd64

      - name: 提交并推送 Linux AMD64 可执行文件
        if: success()
        run: |
          mkdir -p binaries
          cp build/linux-amd64/Cloudflare-Rust_linux_amd64 binaries/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull origin main --no-rebase || git pull origin main --no-rebase
          git add binaries/
          current_time=$(date '+%Y/%m/%d %H:%M:%S')
          if ! git diff --staged --quiet; then
            git commit -m "更新 Linux AMD64 二进制文件 ${current_time}"
            git push origin main
          fi

      - name: 构建 Linux ARM64
        run: |
          mkdir -p build/linux-arm64
          cross build --release --target aarch64-unknown-linux-musl
          cp target/aarch64-unknown-linux-musl/release/CloudflareST-Rust build/linux-arm64/Cloudflare-Rust_linux_arm64

      - name: 提交并推送 Linux ARM64 可执行文件
        if: success()
        run: |
          mkdir -p binaries
          cp build/linux-arm64/Cloudflare-Rust_linux_arm64 binaries/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull origin main --no-rebase || git pull origin main --no-rebase
          git add binaries/
          current_time=$(date '+%Y/%m/%d %H:%M:%S')
          if ! git diff --staged --quiet; then
            git commit -m "更新 Linux ARM64 二进制文件 ${current_time}"
            git push origin main
          fi

  build_macos:
    name: 构建 macOS
    needs: cleanup_releases
    runs-on: macos-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust 环境
        uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
        with:
          toolchain: '1.82.0'

      - name: 构建 macOS AMD64
        run: |
          mkdir -p build/macos
          rustup target add x86_64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
          cp target/x86_64-apple-darwin/release/CloudflareST-Rust build/macos/Cloudflare-Rust_macos_x86_64

      - name: 提交并推送 macOS AMD64 可执行文件
        if: success()
        run: |
          mkdir -p binaries
          cp build/macos/Cloudflare-Rust_macos_x86_64 binaries/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull origin main --no-rebase || git pull origin main --no-rebase
          git add binaries/
          current_time=$(date '+%Y/%m/%d %H:%M:%S')
          if ! git diff --staged --quiet; then
            git commit -m "更新 macOS AMD64 二进制文件 ${current_time}"
            git push origin main
          fi

      - name: 构建 macOS ARM64
        run: |
          mkdir -p build/macos-arm64
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/CloudflareST-Rust build/macos-arm64/Cloudflare-Rust_macos_arm64

      - name: 提交并推送 macOS ARM64 可执行文件
        if: success()
        run: |
          mkdir -p binaries
          cp build/macos-arm64/Cloudflare-Rust_macos_arm64 binaries/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull origin main --no-rebase || git pull origin main --no-rebase
          git add binaries/
          current_time=$(date '+%Y/%m/%d %H:%M:%S')
          if ! git diff --staged --quiet; then
            git commit -m "更新 macOS ARM64 二进制文件 ${current_time}"
            git push origin main
          fi

  package_and_release:
    name: 打包和发布
    needs: [build_linux_windows, build_macos]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 创建打包目录
        run: |
          mkdir -p releases

      - name: 打包所有二进制文件
        run: |
          # Windows
          tar -czf releases/Cloudflare-Rust_windows_x86_64.tar.gz -C binaries Cloudflare-Rust_windows_x86_64.exe
          
          # Linux
          tar -czf releases/Cloudflare-Rust_linux_amd64.tar.gz -C binaries Cloudflare-Rust_linux_amd64
          tar -czf releases/Cloudflare-Rust_linux_arm64.tar.gz -C binaries Cloudflare-Rust_linux_arm64
          
          # macOS
          tar -czf releases/Cloudflare-Rust_macos_x86_64.tar.gz -C binaries Cloudflare-Rust_macos_x86_64
          tar -czf releases/Cloudflare-Rust_macos_arm64.tar.gz -C binaries Cloudflare-Rust_macos_arm64

      - name: 创建发布版本
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0-${{ github.run_number }}
          release_name: Cloudflare-Rust v1.0.0-${{ github.run_number }}
          body: |
            Cloudflare-Rust 自动构建版本
            
            包含以下平台的二进制文件：
            - Windows x86_64
            - Linux AMD64
            - Linux ARM64
            - macOS x86_64
            - macOS ARM64
          draft: false
          prerelease: false

      - name: 上传 Windows 二进制文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/Cloudflare-Rust_windows_x86_64.tar.gz
          asset_name: Cloudflare-Rust_windows_x86_64.tar.gz
          asset_content_type: application/gzip

      - name: 上传 Linux AMD64 二进制文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/Cloudflare-Rust_linux_amd64.tar.gz
          asset_name: Cloudflare-Rust_linux_amd64.tar.gz
          asset_content_type: application/gzip

      - name: 上传 Linux ARM64 二进制文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/Cloudflare-Rust_linux_arm64.tar.gz
          asset_name: Cloudflare-Rust_linux_arm64.tar.gz
          asset_content_type: application/gzip

      - name: 上传 macOS x86_64 二进制文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/Cloudflare-Rust_macos_x86_64.tar.gz
          asset_name: Cloudflare-Rust_macos_x86_64.tar.gz
          asset_content_type: application/gzip

      - name: 上传 macOS ARM64 二进制文件
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/Cloudflare-Rust_macos_arm64.tar.gz
          asset_name: Cloudflare-Rust_macos_arm64.tar.gz
          asset_content_type: application/gzip
